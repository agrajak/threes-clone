{"version":3,"sources":["interfaces.ts","utils.ts","models/index.ts","models/matrix.ts","animation.ts","Header.ts","Board.ts","index.ts"],"names":[],"mappings":";AAea,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA,QAAA,GAAA,QAAA,MAAA,QAAA,UAAA,EAHA,QAAA,KAAO,CAAC,GAAI,GACZ,QAAA,MAAQ,CAAC,EAAG,GACZ,QAAA,GAAK,EAAE,EAAG,GACV,QAAA,KAAO,CAAC,EAAG;;ACExB,aAfA,SAAgB,EAAa,GACpB,YADoB,IAAA,IAAA,EAAA,GACpB,KAAK,MAAM,KAAK,SAAW,GAEpC,SAAgB,IACP,OAAA,EAAa,GAAK,EAE3B,SAAgB,IACP,MAAA,CAAC,EAAa,GAAI,EAAa,IAExC,SAAgB,EAAS,GAChB,MAAA,CAAC,KAAK,MAAM,EAAM,GAAI,EAAM,GAErC,SAAgB,EAAM,GACb,OAAM,EADW,EAAA,GAAK,EAAA,GAG/B,SAAgB,EAAc,GACrB,OAAA,EAAI,KAAK,MAAM,KAAK,SAAW,EAAI,SAD5C,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,QAAA,MAAA,QAAA,SAAA,QAAA,eAAA,QAAA,YAAA,QAAA,kBAAA,EAfA,QAAA,aAAA,EAGA,QAAA,YAAA,EAGA,QAAA,eAAA,EAGA,QAAA,SAAA,EAGA,QAAA,MAAA,EAGA,QAAA,cAAA;;ACSA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAxBA,IAAA,EAAA,WAAA,SAAA,IACE,KAAA,UAA6B,IAAI,IAqBnC,OApBE,EAAA,UAAA,GAAA,SAAG,EAAc,GACV,KAAA,UAAU,IAAI,CACjB,KAAI,EACJ,QAAO,KAGX,EAAA,UAAA,IAAA,SAAI,GAAJ,IAAA,EAAA,KACE,MAAM,KAAK,KAAK,WACb,OAAO,SAAC,GAAM,OAAA,EAAE,OAAS,IACzB,QAAQ,SAAC,GACR,EAAK,UAAU,OAAO,MAG5B,EAAA,UAAA,KAAA,SAAK,EAAc,QAAA,IAAA,IAAA,OAAA,GACjB,MAAM,KAAK,KAAK,WACb,OAAO,SAAC,GAAM,OAAA,EAAE,OAAS,IACzB,QAAQ,SAAC,GACR,EAAS,QAAQ,MAGzB,EAtBA,GAwBA,QAAA,QAAe;;ACuKd,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,EAAA,MAAA,KAAA,gBAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EAjMD,IAAA,EAAA,QAAA,iBACA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,YACA,EAAA,SAAA,GAIE,SAAA,IAAA,IAAA,EACE,EAAA,KAAA,OAAO,KAyLV,OA3LC,EAAA,QAAiB,KAGf,EAAK,OAwLR,EAPD,OAvL4B,EAAA,EAAA,GAQ1B,EAAA,UAAA,IAAA,SAAI,GACG,KAAA,EAAI,MAAM,KAAK,CAAE,OAAQ,IAAM,WAAO,MAAA,CAAE,OAAQ,EAAG,MAAO,KAC1D,KAAA,EAAE,QAAQ,SAAC,EAAM,GACd,IAAA,EAAa,EAAA,SAAS,GAArB,EAAG,EAAA,GAAE,EAAG,EAAA,GACf,EAAK,OAAS,EAAI,GAAK,MAG3B,EAAA,UAAA,KAAA,WACO,KAAA,EAAI,MAAM,KAAK,CAAE,OAAQ,IAAM,WAAO,MAAA,CAAE,OAAQ,EAAG,MAAO,KAC1D,IAAA,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CACpB,IAAA,EAAQ,EAAA,iBACR,EAAQ,EAAA,cAAc,CAAC,EAAG,EAAG,IAC9B,KAAA,OAAO,EAAO,CAAE,OAAQ,IAE1B,KAAA,KAAK,QACL,KAAA,WACA,KAAA,WAEP,EAAA,UAAA,WAAA,SAAW,GACL,IAAA,GAAO,EACT,GAAO,EACH,EAAY,GAEd,GADe,GAAa,EAAA,MAAQ,GAAa,EAAA,MACrC,CACV,GAAa,EAAA,KAAM,EAAM,EACpB,GAAa,EAAA,QAAO,EAAM,GAC9B,IAAA,IAAI,EAAM,EAAG,EAAM,EAAG,IACS,GAA9B,KAAK,GAAG,CAAC,EAAK,IAAM,QACtB,EAAU,KAAK,CAAC,EAAK,QAGpB,CACD,GAAa,EAAA,GAAI,EAAM,EAClB,GAAa,EAAA,OAAM,EAAM,GAC7B,IAAA,IAAI,EAAM,EAAG,EAAM,EAAG,IACS,GAA9B,KAAK,GAAG,CAAC,EAAK,IAAM,QACtB,EAAU,KAAK,CAAC,EAAK,IAKH,GAApB,EAAU,SACP,KAAA,QAAU,MAEZ,KAAA,QAAU,EAAA,cAAc,IAE/B,EAAA,UAAA,QAAA,SAAQ,GAwIT,IAAA,EAtIO,OADQ,QAAZ,EAAA,KAAK,eAAO,IAAA,GAAI,KAAK,WAAW,GACZ,MAAhB,KAAK,UACJ,KAAA,OAAO,KAAK,QAAS,CAAE,OAAQ,KAAK,OACpC,KAAA,KAAK,MAAO,CAAE,QAAS,KAAK,QAAS,OAAQ,KAAK,OAClD,KAAA,UACA,KAAA,QAAU,MACR,IAET,EAAA,UAAA,WAAA,WAAA,IAAA,EAAA,KAEI,OAEiC,GAFjC,CAAC,EAAA,GAAI,EAAA,KAAM,EAAA,KAAM,EAAA,OACd,IAAI,SAAC,GAAc,OAAA,EAAK,uBAAuB,GAAW,SAC1D,OAAO,SAAC,EAAG,GAAM,OAAA,EAAI,GAAG,IAG/B,EAAA,UAAA,QAAA,WACM,IAAA,EAAO,EAAA,cAAc,CAAC,EAAG,EAAG,IAC5B,GAAQ,GAAR,GAAqB,GAAR,EAAW,CACpB,IAAA,EAAW,KAAK,EAAE,IAAI,SAAC,GAAS,OAAA,EAAK,SAAQ,OAAO,SAAC,GAAM,OAAK,GAAL,IAC9D,OACG,EAAW,KAAK,EAAE,IAAI,SAAC,GAAS,OAAA,EAAK,SAAQ,OAAO,SAAC,GAAM,OAAK,GAAL,IAC9D,OAEC,EAAW,EAAW,EAAG,EAAO,EAC3B,EAAW,EAAW,IAAG,EAAO,GAEtC,KAAA,KAAO,EACP,KAAA,KAAK,WAAY,KAAK,OAE7B,EAAA,UAAA,SAAA,WA0GD,IAAA,EAzGG,OAA4D,QAA5D,EAAO,KAAK,EAAE,IAAI,SAAC,GAAM,OAAA,EAAE,QAAO,OAAO,SAAC,EAAG,GAAM,OAAA,EAAI,GAAG,UAAE,IAAA,EAAA,EAAI,GAElE,EAAA,UAAA,SAAA,WACO,KAAA,KAAK,YAAa,KAAK,aAE9B,EAAA,UAAA,KAAA,SAAK,GACE,IACU,KAAK,MAAM,GACb,GAAG,KAAK,QAAQ,GACxB,KAAA,KAAK,UAEZ,EAAA,UAAA,MAAA,SAAM,GAAN,IAAA,EAAA,KACS,EAAU,EAAS,GAAf,EAAM,EAAS,GACtB,EAAM,EACJ,EAAS,GA6BR,OA5BS,KAAK,uBAAuB,GAEzC,IAAI,SAAC,GAAQ,OAAA,EAAA,SAAS,KACtB,QAAQ,SAAC,GAAC,IAAA,EAAG,EAAA,GAAE,EAAG,EAAA,GACX,EAAK,EAAM,EACf,EAAK,EAAM,EACP,EAAU,EAAK,GAAG,CAAC,EAAI,IACvB,EAAU,EAAK,GAAG,CAAC,EAAK,IACR,GAAlB,EAAQ,QACV,EAAO,KAAK,CACV,IAAK,EAAA,MAAM,CAAC,EAAI,IAChB,IAAK,EACL,IAAK,EACL,OAAQ,EAAQ,OAChB,MAAO,EAAQ,OAAS,EAAQ,SAEpC,EAAK,OAAO,CAAC,EAAI,GAAK,CACpB,OAAQ,EAAQ,OAAS,EAAQ,OACjC,MAAO,EAAQ,MAAQ,EAAQ,MAAQ,EAAQ,SAEjD,EAAK,OAAO,CAAC,EAAK,GAAM,CACtB,OAAQ,EACR,MAAO,IAET,GAAO,IAEN,KAAA,KAAK,QAAS,GACf,EAAM,GAAG,KAAK,WACX,GAET,EAAA,UAAA,OAAA,SAAO,EAAc,GA4DtB,IAAA,EA3DS,EAAM,EAAA,MAAM,GACb,KAAA,EAAI,OAAO,OAAO,GAAI,KAAK,IAAC,EAAA,IAC9B,GAAG,EAAA,EAAA,GAAQ,KAAK,GAAG,IAAS,GADtB,KAIX,EAAA,UAAA,GAAA,SAAG,GACK,IAAA,EAAsB,iBAAT,EAAoB,EAAQ,EAAA,MAAM,GAC9C,OAAA,KAAK,EAAE,IAEhB,EAAA,UAAA,uBAAA,SAAuB,GACjB,IAAC,EAAW,MAAO,GAChB,IAAA,EAAU,EAAS,GAAf,EAAM,EAAS,GACpB,EAAoB,GAEtB,EAAa,GAAa,EAAA,MAAQ,GAAa,EAAA,MAC/C,EAAM,EACR,EAAM,EAEJ,GAAa,EAAA,KAAM,EAAM,EACpB,GAAa,EAAA,MAAO,EAAM,EAC1B,GAAa,EAAA,GAAI,EAAM,EACvB,GAAa,EAAA,OAAM,EAAM,GAE7B,IAAA,IAAI,EAAI,EAAG,EAAI,GAAI,IAAK,CACrB,IAAA,EAAK,EAAK,EACd,EAAK,EAAK,GAET,EAAW,KAAK,GAAG,CAAC,EAAI,IAAK,OAAQ,KAAK,GAAG,CAAC,EAAK,IAAM,UACnB,GAArC,EAAQ,QAAQ,EAAA,MAAM,CAAC,EAAI,MACC,GAA9B,KAAK,GAAG,CAAC,EAAK,IAAM,QAEpB,EAAQ,KAAK,EAAA,MAAM,CAAC,EAAK,KAEvB,GACE,EAAI,GAAK,IACX,GAAO,GAET,GAAO,EAAM,GAAK,IAEd,EAAI,GAAK,IACX,GAAO,GAET,GAAO,EAAM,GAAK,GAGf,OAAA,GAET,EAAA,UAAA,QAAA,SAAQ,GACD,KAAA,EAAE,QAAQ,SAAC,EAAM,GACpB,EAAQ,EAAK,EAAA,SAAS,GAAI,CAAE,EAAK,QAGvC,EAvLA,CAA4B,EAAA,SAyL5B,SAAS,EAAW,EAAW,GACzB,OAAK,GAAL,GAAe,GAAL,IACV,GAAK,GAAK,EAAI,GAAK,GACnB,GAAK,GAAK,EAAI,GAAK,GAAK,EAAI,GAAK,GA5L1B,QAAA,OAAA;;ACyBb,aA1BA,SAAgB,EACd,EACA,EACA,QAAA,IAAA,IAAA,EAAA,KAEI,IAAA,EAAU,KACP,OAAA,IAAI,QAAQ,SAAC,GAWlB,sBAVa,SAAP,EAAQ,GAER,GADC,IAAS,EAAU,GACpB,EAAY,EAAU,EAGxB,OAFA,GAAa,SACb,IAGF,GAAS,EAAM,EAAY,GAC3B,sBAAsB,OAW5B,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,QAAA,eAAA,QAAA,sBAAA,EA1BA,QAAA,iBAAA,EAoBA,IAAA,EAAA,WAKA,OAHE,SAAY,GACL,KAAA,MAAQ,GAHjB,GAMA,SAAgB,EAAO,EAAM,EAAI,GACxB,OAAA,SAAU,GACP,OAAA,EAAY,GAAa,EAAK,GAAQ,GARrC,QAAA,eAAA,EAMb,QAAA,OAAA;;AC1Ba,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EAFb,IAAA,EAAA,QAAA,eAEA,EAAA,WAIE,SAAA,IAFA,KAAA,MAAgB,EAGT,KAAA,EAAI,SAAS,eAAe,UAiCrC,OA/BE,EAAA,UAAA,QAAA,SAAQ,GACA,KAAA,EAAE,cACN,gBACmB,UAAY,GAAG,EAC/B,KAAA,KAAO,GAEd,EAAA,UAAA,SAAA,SAAS,GAAT,IAAA,EAAA,KAEQ,EAAS,EAAA,OAAO,KAAK,MAAO,EADjB,KAEX,EAAY,EAAA,iBAChB,aACA,SAAC,GACC,EAAK,aAAa,KAAK,MAAM,EAAO,MALvB,KASjB,QAAQ,IAAI,GACZ,EAAU,OAEL,KAAA,MAAQ,GAEf,EAAA,UAAA,aAAA,SAAa,GACL,KAAA,EAAE,cACN,iBACmB,UAAY,GAAG,GAEtC,EAAA,UAAA,cAAA,SAAc,GACN,IAAA,EAAW,KAAK,EAAE,cAAc,UAClC,EAAM,EAAS,UAAU,IAAI,aAC5B,EAAS,UAAU,OAAO,cAEnC,EAtCA,GAAa,QAAA,OAAA;;ACmVZ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IArVD,IAAA,EAAA,QAAA,mBACA,EAAA,QAAA,gBACA,EAAA,QAAA,WACA,EAAA,QAAA,YACA,EAAA,QAAA,eAEM,EAAW,IACX,EAAsB,GAC5B,EAAA,WAYE,SAAA,IAVA,KAAA,OAAS,IAAI,EAAA,OAEb,KAAA,YAAa,EAEb,KAAA,MAAQ,EACR,KAAA,IAAM,EACN,KAAA,EAAI,KACJ,KAAA,EAAI,KACJ,KAAA,UAAW,EAGJ,KAAA,EAAI,SAAS,eAAe,SAC5B,KAAA,OAAS,IAAI,EAAA,OACb,KAAA,eACA,KAAA,OAAO,OA6RhB,OA3RE,EAAA,UAAA,aAAA,WAAA,IAAA,EAAA,KACO,KAAA,OAAO,GAAG,MAAO,SAAC,GAAE,IAAA,EAAO,EAAA,QAAE,EAAM,EAAA,OACtC,EAAK,YAAY,EAAS,GAAQ,KAAK,WACrC,EAAK,OAAO,KAAK,EAAjB,GAC8B,GAA1B,EAAK,OAAO,YAAmB,EAAK,OAAO,cAC7C,WAAW,WACT,MAAM,iBAAiB,EAAK,OAAO,WAAU,KAC7C,EAAK,OAAO,QACX,SAKJ,KAAA,OAAO,GAAG,OAAQ,KAAK,OAAO,KAAK,OACnC,KAAA,OAAO,GAAG,QAAS,SAAC,GACvB,EAAK,gBAAgB,KAElB,KAAA,OAAO,GAAG,WAAY,KAAK,OAAO,QAAQ,KAAK,KAAK,SACpD,KAAA,OAAO,GAAG,YAAa,KAAK,OAAO,SAAS,KAAK,KAAK,SAE3D,OAAO,iBAAiB,SAAU,KAAK,SAAS,KAAK,OACrD,OAAO,iBAAiB,YAAa,KAAK,UAAU,KAAK,OACzD,OAAO,iBAAiB,UAAW,KAAK,QAAQ,KAAK,OACrD,OAAO,iBAAiB,aAAc,KAAK,QAAQ,KAAK,OACxD,OAAO,iBAAiB,YAAa,KAAK,SAAS,KAAK,OACxD,OAAO,iBAAiB,aAAc,KAAK,UAAU,KAAK,OAC1D,OAAO,iBAAiB,WAAY,KAAK,QAAQ,KAAK,OACtD,OAAO,iBAAiB,YAAa,KAAK,SAAS,KAAK,OACxD,OAAO,iBAAiB,UAAW,KAAK,UAAU,KAAK,QAEzD,EAAA,UAAA,gBAAA,SAAgB,EAAQ,GAAxB,IAAA,EAAA,UAAwB,IAAA,IAAA,EAAA,KAClB,IAAA,EAAU,KACR,EAAS,KAAK,kBACd,EAAW,KAAK,UAAf,EAAE,EAAA,GAAE,EAAE,EAAA,GACP,EAAS,EAAA,OAAO,EAAG,IAAK,GACxB,EAAkB,KAAK,aAAe,UAAY,UAClD,EAAgB,EAAA,OAAO,IAAK,EAAG,GAErC,EAAO,QAAQ,SAAC,GAAE,IAAA,EAAG,EAAA,IAAE,EAAG,EAAA,IAClB,EAAc,EAAA,MAAM,CAAC,EAAM,EAAI,EAAM,IACrC,EAAO,EAAK,iBAAiB,GAC/B,IACF,EAAK,MAAM,QAAU,UAIrB,IAAA,GAAc,EAEX,OAAA,IAAI,QAAQ,SAAC,GACG,GAAjB,EAAO,QAAa,IAuBxB,sBAtBa,SAAP,EAAQ,GACP,IAAS,EAAU,GAClB,IAAA,EAAK,EAAY,EACnB,GAAM,EAAW,IAAG,GAAc,GACtC,EAAO,QAAQ,SAAC,GAAE,IAAA,EAAG,EAAA,IAAE,EAAG,EAAA,IAAE,EAAG,EAAA,IAAE,EAAM,EAAA,OAAE,EAAK,EAAA,MACtC,EAAO,EAAK,iBAAiB,GAC7B,EAAI,EAAM,EACd,EAAI,EAAM,EAEZ,EAAe,EAAM,EAAc,EAAQ,GAE3C,EAAK,MAAM,OAAS,KACpB,EAAK,MAAM,UAAY,aAAa,EAAC,OAAO,EAAC,OAAO,EAAe,IAAI,KAAK,MAC1E,EAAc,EAAc,GAAM,EAAO,IAC1C,SAEC,EAAY,EAAU,EACxB,IAGF,sBAAsB,QAK5B,EAAA,UAAA,UAAA,SAAU,GAAV,IAAA,EAAA,KACQ,EAAS,KAAK,kBACZ,EAAQ,EAAK,IAEb,OADH,KAAA,UAAY,KACT,GACD,IAAA,UACE,KAAA,UAAY,EAAA,GACjB,MACG,IAAA,YACE,KAAA,UAAY,EAAA,KACjB,MACG,IAAA,YACE,KAAA,UAAY,EAAA,KACjB,MACG,IAAA,aACE,KAAA,UAAY,EAAA,MAGhB,KAAK,WACL,KAAA,aAAa,EAAG,EAAQ,IAAI,KAAK,WACpC,EAAK,OAAO,KAAK,EAAK,cAG1B,EAAA,UAAA,SAAA,WACO,KAAA,cACA,KAAA,eAAe,IAEtB,EAAA,UAAA,UAAA,SAAU,GACF,IAAA,EAAuB,EAAiB,GAAtC,EAAO,EAAA,QAAE,EAAO,EAAA,QACnB,KAAA,EAAI,EACJ,KAAA,EAAI,EACJ,KAAA,YAAa,GAEpB,EAAA,UAAA,QAAA,WAAA,IAAA,EAAA,KACQ,EAAS,KAAK,kBAChB,EAAQ,KAAK,IAAI,EAAQ,KAAK,OAC9B,EAAQ,EAAS,EACd,KAAA,aAAa,EAAO,EAAQ,IAAI,KAAK,WACxC,EAAK,OAAO,KAAK,EAAK,WACtB,EAAK,OAAO,eAAc,GAC1B,EAAK,MAAQ,EACb,EAAK,YAAa,EAClB,EAAK,UAAY,OAGd,KAAA,aAAa,EAAO,EAAG,IAAI,KAAK,WACnC,EAAK,YAAa,EAClB,EAAK,UAAY,KACjB,EAAK,IAAM,QAKjB,EAAA,UAAA,aAAA,SAAa,EAAU,EAAQ,QAAlB,IAAA,IAAA,EAAA,QAAU,IAAA,IAAA,EAAA,QAAQ,IAAA,IAAA,EAAA,KACZ,KAAK,SAAhB,IACF,EAAU,KACV,EAAiB,KAAK,eAAe,KAAK,MACxC,EAAI,EAAA,OAAO,EAAM,EAAI,GACpB,OAAA,IAAI,QAAQ,SAAC,EAAS,GAY3B,sBAXa,SAAP,EAAQ,GACP,IAAS,EAAU,GAClB,IAAA,EAAK,EAAY,EACnB,GAAA,EAAY,EAAU,EAGxB,OAFA,SACA,EAAe,GAGjB,EAAe,EAAE,IACjB,sBAAsB,QAK5B,EAAA,UAAA,YAAA,SAAY,EAAS,EAAQ,GAA7B,IAAA,EAAA,UAA6B,IAAA,IAAA,EAAA,KACrB,IAAA,EAAO,EAAe,IACtB,EAAW,KAAK,UAAf,EAAE,EAAA,GAAE,EAAE,EAAA,GACR,KAAA,EAAE,YAAY,GACnB,EAAe,EAAM,GACrB,EAAK,MAAM,OAAS,KAEd,IAAA,EAAI,EAAA,OAAO,EAAQ,GAAK,EAAI,EAAQ,GAAI,GACxC,EAAI,EAAA,OAAO,EAAQ,GAAK,EAAI,EAAQ,GAAI,GACxC,EAAS,KAAK,kBACd,EAAU,EAAA,OAAO,EAAG,EAAG,GAE7B,EAAK,MAAM,UAAY,aAAa,EAAE,GAAK,EAAM,OAAO,EAAE,GAAK,EAAM,MAChE,KAAA,cACD,IAAA,EAAU,KAEP,OAAA,IAAI,QAAQ,SAAC,EAAS,GAe3B,sBAda,SAAP,EAAQ,GACP,IAAS,EAAU,GAClB,IAAA,EAAK,EAAY,EAKnB,GAJJ,EAAK,MAAM,UAAY,aAAa,EAAE,GAAM,EAAM,OAChD,EAAE,GAAM,EAAM,MAEhB,EAAK,MAAM,QAAU,GAAG,EAAQ,GAC5B,EAAY,EAAU,EAGxB,OAFA,EAAK,EAAE,YAAY,QACnB,IAGF,sBAAsB,QAK5B,EAAA,UAAA,SAAA,SAAS,GACH,GAAC,KAAK,WAAN,CACE,IAAA,EAAuB,EAAiB,GAAtC,EAAO,EAAA,QAAE,EAAO,EAAA,QAClB,EAAS,KAAK,kBACd,EAAK,EAAU,KAAK,EACxB,EAAK,EAAU,KAAK,EAClB,GAAM,GAAN,GAAiB,GAAN,EAAX,CACC,KAAA,EAAI,EACJ,KAAA,EAAI,EACH,IAAA,EAAY,EAAyB,EAAI,GAE1C,KAAK,YACH,KAAA,UAAY,EAEZ,KAAA,IAAM,KAAK,aAAe,EAAU,GAEvC,IAKE,IALI,KAAK,aAAe,EAAU,GAM/B,KAAK,MACX,KAAK,aAAe,KAAK,UAAU,GAAK,KAAK,UAAU,IAEtD,EAAQ,EACL,KAAA,UAAY,MAId,KAAA,OAAO,cAAc,EAAQ,EAAS,GACtC,KAAA,MAAQ,EAER,KAAA,eAAe,KAAK,IAAI,EAAO,QAGtC,EAAA,UAAA,eAAA,SAAe,GAAf,IAiGD,EAjGC,EAAA,KACQ,EAAyB,QAAzB,EAAW,KAAK,iBAAS,IAAA,EAAA,EAAI,CAAC,EAAG,GAAhC,EAAE,EAAA,GAAE,EAAE,EAAA,GACP,EAAU,KAAK,OAAO,uBAAuB,KAAK,WAClD,EAAS,KAAK,kBACf,KAAA,OAAO,QAAQ,SAAC,GAAC,IAAA,EAAG,EAAA,GAAE,EAAG,EAAA,GAAE,EAAG,EAAA,GAC7B,GAAe,GADoB,EAAA,GAC9B,OAAL,CACA,IAAA,EAAI,EAAM,EACZ,EAAI,EAAM,GAEiB,GAAzB,EAAQ,QAAQ,KAClB,GAAK,EAAQ,EACb,GAAK,EAAQ,GAET,IAAA,EAAO,EAAK,iBAAiB,GAEnC,EAAK,MAAM,OAAS,GAAG,EAAK,OAAO,GAAG,GAAK,MAC3C,EAAK,MAAM,UAAY,aAAa,EAAC,OAAO,EAAC,UAIjD,EAAA,UAAA,WAAA,WACS,OAAA,KAAK,WAAa,EAAA,MAAQ,KAAK,WAAa,EAAA,OAGrD,EAAA,UAAA,OAAA,WAAA,IAAA,EAAA,KACO,KAAA,EAAE,iBAAiB,SAAS,QAAQ,SAAC,GACxC,EAAK,EAAE,YAAY,KAEhB,KAAA,OAAO,QAAQ,SAAC,GAAI,EAAA,GAAK,EAAA,GAAR,IAAU,EAAG,EAAA,GAAE,EAAI,EAAA,GACnC,GAAe,GAAf,EAAK,OAAL,CACE,IAAA,EAAO,EAAe,GAC5B,EAAe,EAAM,EAAK,QAC1B,EAAK,EAAE,YAAY,MAEhB,KAAA,cACA,KAAA,eAAe,IAGtB,EAAA,UAAA,YAAA,WAAA,IAAA,EAAA,KACO,KAAA,EAAE,iBAAiB,SAAS,QAAQ,SAAC,GAClC,aAAgB,iBACtB,EAAK,MAAM,MAAQ,EAAK,MAAM,OAAY,EAAK,oBAAmB,SAGtE,EAAA,UAAA,kBAAA,WAES,OADU,KAAK,EAAE,cAAc,SACtB,cAGlB,EAAA,UAAA,gBAAA,WACM,OAA4B,GAA5B,KAAK,EAAE,WAAW,OAAoB,EAC1B,SAAS,iBAAiB,KAAK,GAAG,QACjC,KAAK,qBAGxB,EAAA,UAAA,qBAAA,SAAqB,GACb,IAAA,EAAgB,KAAK,EAAE,cAC3B,cAAc,EAAG,MACjB,wBACK,MAAA,CAHI,EAAA,IAAM,EAAA,OAMnB,EAAA,UAAA,iBAAA,SAAiB,GACR,OAAA,KAAK,EAAE,cAAc,cAAc,EAAG,OAEjD,EA7SA,GA+SA,SAAS,EAAyB,EAAW,GACvC,OAAA,KAAK,IAAI,GAAa,KAAK,IAAI,GAC7B,EAAY,EAAU,EAAA,MACd,EAAA,KAER,EAAY,EAAU,EAAA,KACd,EAAA,GAGhB,SAAS,EAAe,EAAsB,GAC5C,EAAK,UAAY,GAAG,EACP,GAAT,EACF,EAAK,UAAU,OAAO,QAEtB,EAAK,UAAU,IAAI,QAErB,EAAK,aAAa,QAAS,EAAQ,IAErC,SAAS,EAAe,GAChB,IAAA,EAAO,SAAS,cAAc,OAK7B,OAJP,EAAK,UAAU,IAAI,aACP,IAAR,GACF,EAAK,aAAa,MAAO,GAEpB,EAGT,SAAS,EAAiB,GACpB,OAAA,aAAiB,WAAmB,EACjC,EAAM,QAAQ,GACtB,QAAA,QAAA;;;;ACjVD,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJA,IAAA,EAAA,EAAA,QAAA,YACA,QAAA,sBACA,QAAA,sBAGM,IAAA,EAAA","file":"threes-clone.9638950b.js","sourceRoot":"..","sourcesContent":["export interface ThreeEvent {\n  type: string;\n  handler: Function;\n}\n\nexport type Point = [number, number];\n\nexport interface Cell {\n  number: number;\n  score: number;\n}\n\nexport const LEFT = [0, -1] as const;\nexport const RIGHT = [0, 1] as const;\nexport const UP = [-1, 0] as const;\nexport const DOWN = [1, 0] as const;\n\nexport type Direction = typeof LEFT | typeof RIGHT | typeof UP | typeof DOWN;\n","import { Point } from \"./interfaces\";\n\nexport function getRandomInt(max: number = 1) {\n  return Math.floor(Math.random() * max);\n}\nexport function getOneOrTwo() {\n  return getRandomInt(2) + 1;\n}\nexport function getRandomPoint(): Point {\n  return [getRandomInt(4), getRandomInt(4)];\n}\nexport function toRowCol(idx): Point {\n  return [Math.floor(idx / 4), idx % 4];\n}\nexport function toIdx([row, col]: Point) {\n  return row * 4 + col;\n}\nexport function pickRandomOne(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n","import { ThreeEvent } from \"../interfaces\";\n\nclass Model {\n  observers: Set<ThreeEvent> = new Set();\n  on(type: string, handler: Function) {\n    this.observers.add({\n      type,\n      handler,\n    });\n  }\n  off(type: string) {\n    Array.from(this.observers)\n      .filter((x) => x.type === type)\n      .forEach((item: ThreeEvent) => {\n        this.observers.delete(item);\n      });\n  }\n  emit(type: string, payload = undefined) {\n    Array.from(this.observers)\n      .filter((x) => x.type === type)\n      .forEach((observer) => {\n        observer.handler(payload);\n      });\n  }\n}\n\nexport default Model;\n","import { Cell, Direction, DOWN, LEFT, Point, RIGHT, UP } from \"../interfaces\";\nimport { getRandomPoint, pickRandomOne, toIdx, toRowCol } from \"../utils\";\nimport Model from \"./index\";\nexport class Matrix extends Model {\n  m: Cell[];\n  next: null;\n  nextPos: Point = null;\n  constructor() {\n    super();\n    this.init();\n  }\n  set(arr) {\n    this.m = Array.from({ length: 16 }, () => ({ number: 0, score: 0 }));\n    this.m.forEach((item, idx) => {\n      const [row, col] = toRowCol(idx);\n      item.number = arr[row][col];\n    });\n  }\n  init() {\n    this.m = Array.from({ length: 16 }, () => ({ number: 0, score: 0 }));\n    for (let i = 0; i < 3; i++) {\n      const point = getRandomPoint();\n      const value = pickRandomOne([1, 2, 3]);\n      this.mutate(point, { number: value });\n    }\n    this.emit(\"init\");\n    this.setScore();\n    this.setNext();\n  }\n  setNextPos(direction) {\n    let col = -1,\n      row = -1;\n    const available = [];\n    const isVertical = direction == LEFT || direction == RIGHT;\n    if (isVertical) {\n      if (direction == LEFT) col = 3;\n      else if (direction == RIGHT) col = 0;\n      for (let row = 0; row < 4; row++) {\n        if (this.at([row, col]).number == 0) {\n          available.push([row, col]);\n        }\n      }\n    } else {\n      if (direction == UP) row = 3;\n      else if (direction == DOWN) row = 0;\n      for (let col = 0; col < 4; col++) {\n        if (this.at([row, col]).number == 0) {\n          available.push([row, col]);\n        }\n      }\n    }\n\n    if (available.length == 0) {\n      this.nextPos = null;\n    }\n    this.nextPos = pickRandomOne(available);\n  }\n  addNext(direction) {\n    this.nextPos ?? this.setNextPos(direction);\n    if (this.nextPos == null) return false;\n    this.mutate(this.nextPos, { number: this.next });\n    this.emit(\"add\", { nextPos: this.nextPos, number: this.next });\n    this.setNext();\n    this.nextPos = null;\n    return true;\n  }\n  isFinished() {\n    return (\n      [UP, DOWN, LEFT, RIGHT]\n        .map((direction) => this.getMoveableCellIndices(direction).length)\n        .reduce((a, b) => a + b, 0) == 0\n    );\n  }\n  setNext() {\n    let pick = pickRandomOne([1, 2, 3]);\n    if (pick == 1 || pick == 2) {\n      const numOfOne = this.m.map((cell) => cell.number).filter((x) => x == 1)\n        .length;\n      const numOfTwo = this.m.map((cell) => cell.number).filter((x) => x == 2)\n        .length;\n\n      if (numOfOne > numOfTwo + 2) pick = 2;\n      else if (numOfTwo > numOfOne + 2) pick = 1;\n    }\n    this.next = pick;\n    this.emit(\"set-next\", this.next);\n  }\n  getScore() {\n    return this.m.map((x) => x.score).reduce((a, b) => a + b, 0) ?? 0;\n  }\n  setScore() {\n    this.emit(\"set-score\", this.getScore());\n  }\n  move(direction: Direction) {\n    if (!direction) return;\n    const merged = this.merge(direction);\n    if (merged > 0) this.addNext(direction);\n    this.emit(\"move\");\n  }\n  merge(direction: Direction) {\n    const [dx, dy] = direction;\n    let cnt = 0;\n    const merged = [];\n    const indices = this.getMoveableCellIndices(direction);\n    indices\n      .map((idx) => toRowCol(idx))\n      .forEach(([row, col]) => {\n        const _x = row + dx,\n          _y = col + dy;\n        const oldCell = this.at([_x, _y]);\n        const newCell = this.at([row, col]);\n        if (oldCell.number != 0)\n          merged.push({\n            idx: toIdx([_x, _y]),\n            row: _x,\n            col: _y,\n            before: oldCell.number,\n            after: newCell.number + oldCell.number,\n          });\n        this.mutate([_x, _y], {\n          number: oldCell.number + newCell.number,\n          score: oldCell.score + newCell.score + oldCell.number,\n        });\n        this.mutate([row, col], {\n          number: 0,\n          score: 1,\n        });\n        cnt += 1;\n      });\n    this.emit(\"merge\", merged);\n    if (cnt > 0) this.setScore();\n    return cnt;\n  }\n  mutate(point: Point, value: Partial<Cell>) {\n    const idx = toIdx(point);\n    this.m = Object.assign([], this.m, {\n      [idx]: { ...this.at(idx), ...value },\n    });\n  }\n  at(param: number | Point) {\n    const idx = typeof param == \"number\" ? param : toIdx(param);\n    return this.m[idx];\n  }\n  getMoveableCellIndices(direction: Direction) {\n    if (!direction) return [];\n    const [dx, dy] = direction;\n    const indices: number[] = [];\n\n    let isVertical = direction == LEFT || direction == RIGHT;\n    let row = 0,\n      col = 0;\n\n    if (direction == LEFT) col = 1;\n    else if (direction == RIGHT) col = 2;\n    else if (direction == UP) row = 1;\n    else if (direction == DOWN) row = 2;\n\n    for (let i = 0; i < 12; i++) {\n      const _x = dx + row,\n        _y = dy + col;\n      if (\n        (isMergable(this.at([_x, _y]).number, this.at([row, col]).number) ||\n          indices.indexOf(toIdx([_x, _y])) != -1) &&\n        this.at([row, col]).number != 0\n      ) {\n        indices.push(toIdx([row, col]));\n      }\n      if (isVertical) {\n        if (i % 4 == 3) {\n          col -= dy;\n        }\n        row = (row + 1) % 4;\n      } else {\n        if (i % 4 == 3) {\n          row -= dx;\n        }\n        col = (col + 1) % 4;\n      }\n    }\n    return indices;\n  }\n  iterate(callback) {\n    this.m.forEach((cell, idx) => {\n      callback([...toRowCol(idx), idx, cell]);\n    });\n  }\n}\n\nfunction isMergable(a: number, b: number) {\n  if (a == 0 || b == 0) return true;\n  if (a != b && a + b == 3) return true;\n  if (a == b && a + b != 2 && a + b != 4) return true;\n  return false;\n}\n","import Board from \"./Board\";\n\nexport function animationBuilder(\n  onResolve: Function,\n  onRun: Function,\n  duration = 100\n) {\n  let startAt = null;\n  return new Promise((resolve) => {\n    const step = (timestamp) => {\n      if (!startAt) startAt = timestamp;\n      if (timestamp > startAt + duration) {\n        onResolve && onResolve();\n        resolve();\n        return;\n      }\n      onRun && onRun(timestamp - startAt);\n      requestAnimationFrame(step);\n    };\n    requestAnimationFrame(step);\n  });\n}\nexport class BoardAnimation {\n  board: Board;\n  constructor(board) {\n    this.board = board;\n  }\n}\nexport function linear(from, to, duration) {\n  return function (timestamp) {\n    return (timestamp / duration) * (to - from) + from;\n  };\n}\n","import { animationBuilder, linear } from \"./animation\";\n\nexport class Header {\n  $: HTMLDivElement;\n  score: number = 0;\n  next: number;\n  constructor() {\n    this.$ = document.getElementById(\"header\") as HTMLDivElement;\n  }\n  setNext(next) {\n    (this.$.querySelector(\n      \"#next-number\"\n    ) as HTMLDivElement).innerText = `${next}`;\n    this.next = next;\n  }\n  setScore(score) {\n    const duration = 200;\n    const dScore = linear(this.score, score, duration);\n    const animation = animationBuilder(\n      () => {},\n      (dt) => {\n        this.displayScore(Math.floor(dScore(dt)));\n      },\n      duration\n    );\n    console.log(animation);\n    animation.then();\n\n    this.score = score;\n  }\n  displayScore(score) {\n    (this.$.querySelector(\n      \"#score-number\"\n    ) as HTMLDivElement).innerText = `${score}`;\n  }\n  highlightNext(flag: boolean) {\n    const scoreBox = this.$.querySelector(\"#score\") as HTMLDivElement;\n    if (flag) scoreBox.classList.add(\"highlight\");\n    else scoreBox.classList.remove(\"highlight\");\n  }\n}\n","import { Matrix } from \"./models/matrix\";\r\nimport { Cell, Direction, LEFT, RIGHT, UP, DOWN } from \"./interfaces\";\r\nimport { pickRandomOne, toIdx, toRowCol } from \"./utils\";\r\nimport { Header } from \"./Header\";\r\nimport { linear } from \"./animation\";\r\n\r\nconst DURATION = 200;\r\nconst SEMIAUTO_PUSH_RATIO = 0.6;\r\nexport default class Board {\r\n  $: HTMLDivElement;\r\n  matrix = new Matrix();\r\n  header: Header;\r\n  isDragging = false;\r\n  direction: Direction;\r\n  delta = 0;\r\n  pos = 0;\r\n  x = null;\r\n  y = null;\r\n  isMoving = false;\r\n\r\n  constructor() {\r\n    this.$ = document.getElementById(\"board\") as HTMLDivElement;\r\n    this.header = new Header();\r\n    this.bindHandlers();\r\n    this.matrix.init();\r\n  }\r\n  bindHandlers() {\r\n    this.matrix.on(\"add\", ({ nextPos, number }) => {\r\n      this.animateNext(nextPos, number).then(() => {\r\n        this.render.bind(this)();\r\n        if (this.matrix.getScore() != 0 && this.matrix.isFinished()) {\r\n          setTimeout(() => {\r\n            alert(`님 주금! 당신의 점수 [${this.matrix.getScore()}]`);\r\n            this.matrix.init();\r\n          }, 500);\r\n          return;\r\n        }\r\n      });\r\n    });\r\n    this.matrix.on(\"init\", this.render.bind(this));\r\n    this.matrix.on(\"merge\", (merged) => {\r\n      this.flipMergedCards(merged);\r\n    });\r\n    this.matrix.on(\"set-next\", this.header.setNext.bind(this.header));\r\n    this.matrix.on(\"set-score\", this.header.setScore.bind(this.header));\r\n\r\n    window.addEventListener(\"resize\", this.onResize.bind(this));\r\n    window.addEventListener(\"mousedown\", this.dragStart.bind(this));\r\n    window.addEventListener(\"mouseup\", this.dragEnd.bind(this));\r\n    window.addEventListener(\"mouseleave\", this.dragEnd.bind(this));\r\n    window.addEventListener(\"mousemove\", this.dragging.bind(this));\r\n    window.addEventListener(\"touchstart\", this.dragStart.bind(this));\r\n    window.addEventListener(\"touchend\", this.dragEnd.bind(this));\r\n    window.addEventListener(\"touchmove\", this.dragging.bind(this));\r\n    window.addEventListener(\"keydown\", this.onKeyDown.bind(this));\r\n  }\r\n  flipMergedCards(merged, duration = 200) {\r\n    let startAt = null;\r\n    const maxPos = this.calculateMaxPos();\r\n    const [dx, dy] = this.direction;\r\n    const rotate = linear(0, 180, duration);\r\n    const rotateDirection = this.isVertical() ? \"rotateY\" : \"rotateX\";\r\n    const reverseRotate = linear(180, 0, duration);\r\n\r\n    merged.forEach(({ row, col }) => {\r\n      const deMergedIdx = toIdx([row - dx, col - dy]);\r\n      const node = this.getCardNodeByIdx(deMergedIdx);\r\n      if (node) {\r\n        node.style.display = \"none\";\r\n      }\r\n    });\r\n\r\n    let halfWayDone = false;\r\n\r\n    return new Promise((resolve) => {\r\n      if (merged.length == 0) resolve();\r\n      const step = (timestamp) => {\r\n        if (!startAt) startAt = timestamp;\r\n        const dt = timestamp - startAt;\r\n        if (dt >= duration / 2) halfWayDone = true;\r\n        merged.forEach(({ idx, row, col, before, after }) => {\r\n          const node = this.getCardNodeByIdx(idx);\r\n          const x = row * maxPos,\r\n            y = col * maxPos;\r\n\r\n          changeCardNode(node, halfWayDone ? after : before);\r\n\r\n          node.style.zIndex = `20`;\r\n          node.style.transform = `translate(${y}px, ${x}px) ${rotateDirection}(${Math.floor(\r\n            halfWayDone ? reverseRotate(dt) : rotate(dt)\r\n          )}deg)`;\r\n        });\r\n        if (timestamp > startAt + duration) {\r\n          resolve();\r\n          return;\r\n        }\r\n        requestAnimationFrame(step);\r\n      };\r\n      requestAnimationFrame(step);\r\n    });\r\n  }\r\n  onKeyDown(event: KeyboardEvent) {\r\n    const maxPos = this.calculateMaxPos();\r\n    const { key } = event;\r\n    this.direction = null;\r\n    switch (key) {\r\n      case \"ArrowUp\":\r\n        this.direction = UP;\r\n        break;\r\n      case \"ArrowDown\":\r\n        this.direction = DOWN;\r\n        break;\r\n      case \"ArrowLeft\":\r\n        this.direction = LEFT;\r\n        break;\r\n      case \"ArrowRight\":\r\n        this.direction = RIGHT;\r\n        break;\r\n    }\r\n    if (!this.direction) return;\r\n    this.animateCards(0, maxPos, 60).then(() => {\r\n      this.matrix.move(this.direction);\r\n    });\r\n  }\r\n  onResize() {\r\n    this.resizeCards();\r\n    this.translateCards(0);\r\n  }\r\n  dragStart(event) {\r\n    const { clientX, clientY } = touchEventHelper(event);\r\n    this.x = clientX;\r\n    this.y = clientY;\r\n    this.isDragging = true;\r\n  }\r\n  dragEnd() {\r\n    const maxPos = this.calculateMaxPos();\r\n    let delta = Math.min(maxPos, this.delta);\r\n    if (delta / maxPos > SEMIAUTO_PUSH_RATIO) {\r\n      this.animateCards(delta, maxPos, 70).then(() => {\r\n        this.matrix.move(this.direction);\r\n        this.header.highlightNext(false);\r\n        this.delta = 0;\r\n        this.isDragging = false;\r\n        this.direction = null;\r\n      });\r\n    } else {\r\n      this.animateCards(delta, 0, 70).then(() => {\r\n        this.isDragging = false;\r\n        this.direction = null;\r\n        this.pos = null;\r\n      });\r\n    }\r\n  }\r\n\r\n  animateCards(from = 0, to = 1, duration = 100) {\r\n    const isLocked = this.isMoving == true;\r\n    let startAt = null;\r\n    let translateCards = this.translateCards.bind(this);\r\n    const d = linear(from, to, duration);\r\n    return new Promise((resolve, reject) => {\r\n      const step = (timestamp) => {\r\n        if (!startAt) startAt = timestamp;\r\n        const dt = timestamp - startAt;\r\n        if (timestamp > startAt + duration) {\r\n          resolve();\r\n          translateCards(to);\r\n          return;\r\n        }\r\n        translateCards(d(dt));\r\n        requestAnimationFrame(step);\r\n      };\r\n      requestAnimationFrame(step);\r\n    });\r\n  }\r\n  animateNext(nextPos, number, duration = 100) {\r\n    const node = createCardNode(99);\r\n    const [dx, dy] = this.direction;\r\n    this.$.appendChild(node);\r\n    changeCardNode(node, number);\r\n    node.style.zIndex = \"10\";\r\n\r\n    const x = linear(nextPos[0] - dx, nextPos[0], duration);\r\n    const y = linear(nextPos[1] - dy, nextPos[1], duration);\r\n    const maxPos = this.calculateMaxPos();\r\n    const opacity = linear(0, 1, duration);\r\n\r\n    node.style.transform = `translate(${y(0) * maxPos}px, ${x(0) * maxPos}px)`;\r\n    this.resizeCards();\r\n    let startAt = null;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const step = (timestamp) => {\r\n        if (!startAt) startAt = timestamp;\r\n        const dt = timestamp - startAt;\r\n        node.style.transform = `translate(${y(dt) * maxPos}px, ${\r\n          x(dt) * maxPos\r\n        }px)`;\r\n        node.style.opacity = `${opacity(dt)}`;\r\n        if (timestamp > startAt + duration) {\r\n          this.$.removeChild(node);\r\n          resolve();\r\n          return;\r\n        }\r\n        requestAnimationFrame(step);\r\n      };\r\n      requestAnimationFrame(step);\r\n    });\r\n  }\r\n  dragging(event) {\r\n    if (!this.isDragging) return;\r\n    const { clientX, clientY } = touchEventHelper(event);\r\n    const maxPos = this.calculateMaxPos();\r\n    const dx = clientX - this.x,\r\n      dy = clientY - this.y;\r\n    if (dx == 0 && dy == 0) return;\r\n    this.x = clientX;\r\n    this.y = clientY;\r\n    const direction = getDirectionFromMovement(dx, dy);\r\n\r\n    if (!this.direction) {\r\n      this.direction = direction;\r\n\r\n      this.pos = this.isVertical() ? clientX : clientY;\r\n    }\r\n    let pos = this.isVertical() ? clientX : clientY;\r\n\r\n    /**\r\n     * delta: 방향에 따른 상대 거리. 내가 맨처음에 의도한 방향으로 움직이고 있으면 부호가 +, 반대 방향으로 움직이고 있으면 -\r\n     */\r\n    const delta =\r\n      (pos - this.pos) *\r\n      (this.isVertical() ? this.direction[1] : this.direction[0]);\r\n\r\n    if (delta < 0) {\r\n      this.direction = null;\r\n      return;\r\n    }\r\n\r\n    this.header.highlightNext(delta / maxPos > SEMIAUTO_PUSH_RATIO);\r\n    this.delta = delta;\r\n\r\n    this.translateCards(Math.min(delta, maxPos));\r\n  }\r\n\r\n  translateCards(delta) {\r\n    const [dx, dy] = this.direction ?? [0, 0];\r\n    const indices = this.matrix.getMoveableCellIndices(this.direction);\r\n    const maxPos = this.calculateMaxPos();\r\n    this.matrix.iterate(([row, col, idx, cell]) => {\r\n      if (cell.number == 0) return;\r\n      let y = row * maxPos,\r\n        x = col * maxPos;\r\n\r\n      if (indices.indexOf(idx) != -1) {\r\n        y += delta * dx;\r\n        x += delta * dy;\r\n      }\r\n      const node = this.getCardNodeByIdx(idx);\r\n\r\n      node.style.zIndex = `${this.matrix.at(idx).score}`;\r\n      node.style.transform = `translate(${x}px, ${y}px)`;\r\n    });\r\n  }\r\n\r\n  isVertical() {\r\n    return this.direction == LEFT || this.direction == RIGHT;\r\n  }\r\n\r\n  render() {\r\n    this.$.querySelectorAll(\".card\").forEach((node) => {\r\n      this.$.removeChild(node);\r\n    });\r\n    this.matrix.iterate(([row, col, idx, cell]) => {\r\n      if (cell.number == 0) return;\r\n      const node = createCardNode(idx);\r\n      changeCardNode(node, cell.number);\r\n      this.$.appendChild(node);\r\n    });\r\n    this.resizeCards();\r\n    this.translateCards(0);\r\n  }\r\n\r\n  resizeCards() {\r\n    this.$.querySelectorAll(\".card\").forEach((node) => {\r\n      if (!(node instanceof HTMLDivElement)) return;\r\n      node.style.width = node.style.height = `${this.calculateCardSize()}px`;\r\n    });\r\n  }\r\n  calculateCardSize() {\r\n    const cellNode = this.$.querySelector(\".cell\") as HTMLDivElement;\r\n    return cellNode.offsetHeight;\r\n  }\r\n\r\n  calculateMaxPos() {\r\n    if (this.$.childNodes.length == 0) return 0;\r\n    const gapSize = parseInt(getComputedStyle(this.$).rowGap);\r\n    return gapSize + this.calculateCardSize();\r\n  }\r\n\r\n  getCardPositionByIdx(idx: number) {\r\n    const { top, left } = this.$.querySelector(\r\n      `.cell[idx=\"${idx}\"]`\r\n    ).getBoundingClientRect();\r\n    return [top, left];\r\n  }\r\n\r\n  getCardNodeByIdx(idx: number) {\r\n    return this.$.querySelector(`.card[idx=\"${idx}\"]`) as HTMLDivElement;\r\n  }\r\n}\r\n\r\nfunction getDirectionFromMovement(movementX, movementY) {\r\n  if (Math.abs(movementX) > Math.abs(movementY)) {\r\n    if (movementX > 0) return RIGHT;\r\n    else return LEFT;\r\n  } else {\r\n    if (movementY > 0) return DOWN;\r\n    else return UP;\r\n  }\r\n}\r\nfunction changeCardNode(node: HTMLDivElement, value: number) {\r\n  node.innerText = `${value}`;\r\n  if (value == 0) {\r\n    node.classList.remove(\"card\");\r\n  } else {\r\n    node.classList.add(\"card\");\r\n  }\r\n  node.setAttribute(\"value\", value + \"\");\r\n}\r\nfunction createCardNode(idx) {\r\n  const node = document.createElement(\"div\");\r\n  node.classList.add(\"card\");\r\n  if (idx !== undefined) {\r\n    node.setAttribute(\"idx\", idx);\r\n  }\r\n  return node;\r\n}\r\n\r\nfunction touchEventHelper(event: MouseEvent | TouchEvent) {\r\n  if (event instanceof MouseEvent) return event;\r\n  return event.touches[0];\r\n}\r\n","import Board from \"./Board\";\r\nimport \"./styles/index.css\";\r\nimport \"./styles/cards.css\";\r\n\r\n(function () {\r\n  new Board();\r\n})();\r\n"]}